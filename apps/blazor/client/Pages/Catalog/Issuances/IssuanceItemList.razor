@using AMIS.Blazor.Infrastructure.Api
@using MudBlazor

<MudPaper Class="pa-4 mb-4 editor-font-size-scope" Style="max-height: 80vh; overflow-y: auto;">
    <MudText Typo="Typo.h6">Issuance Items - @(Items?.Count ?? 0)</MudText>

    <MudTable T="IssuanceItemDto" Items="Items" Hover Breakpoint="Breakpoint.Sm" Class="th-border-separator">

        <HeaderContent>
            <MudTh Style="width: 250px;">Product</MudTh>
            <MudTh Style="width: 100px;">Balance</MudTh>
            <MudTh Style="width: 80px;">Quantity</MudTh>
            <MudTh Style="width: 120px;">Unit Price</MudTh>
            <MudTh>Amount</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>

        <RowTemplate Context="item">
            @if (item == EditingItem)
            {
                <MudTd Style="width: 250px;">
                    <MudSelect T="Guid ?" @bind-Value="item.ProductId" Variant="Variant.Outlined">
                        @foreach (var product in Products)
                        {
                            <MudSelectItem T="Guid ?" Value="product.Id"
                                Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap; display: block;">
                                @product.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd Style="width: 100px;">
                    <MudText>@GetBalanceFor(item.ProductId).ToString("N0")</MudText>
                </MudTd>
                <MudTd Style="width: 80px;">
                    <MudNumericField HideSpinButtons T="int" @bind-Value="item.Qty" Min="1"
                        Max="@GetBalanceFor(item.ProductId)" Variant="Variant.Outlined" />
                </MudTd>
                <MudTd Style="width: 120px;">
                    <MudTextField T="string" Value="@GetAvePriceFor(item.ProductId).ToString("N2")" ReadOnly
                        Variant="Variant.Outlined" />
                </MudTd>
                <MudTd>
                    @{
                        var newAmount = item.Qty * GetAvePriceFor(item.ProductId);
                    }
                    <MudText>@newAmount.ToString("N2")</MudText>
                </MudTd>
                <MudTd>
                    <MudTextField T="string" @bind-Value="item.Status" Variant="Variant.Outlined" />
                </MudTd>
                <MudTd class="text-center">
                    <div class="d-flex justify-center gap-2">
                        <MudTooltip Text="Save Changes">
                            <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                OnClick="@(() => SaveEdit())" />
                        </MudTooltip>
                        <MudTooltip Text="Cancel Edit">
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Secondary"
                                OnClick="@(() => CancelEdit())" />
                        </MudTooltip>
                    </div>
                </MudTd>
            }
            else
            {
                <MudTd Style="width: 250px;">
                    @{
                        var product = Products?.FirstOrDefault(p => p.Id == item.ProductId);
                    }
                    <span style="display: block; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        @(product is not null ? product.Name : "â€”")
                    </span>
                </MudTd>
                <MudTd Style="width: 100px;">@GetBalanceFor(item.ProductId).ToString("N0")</MudTd>
                <MudTd Style="width: 80px;">@item.Qty.ToString("N0")</MudTd>
                <MudTd Style="width: 120px;">@GetAvePriceFor(item.ProductId).ToString("N2")</MudTd>
                <MudTd>
                    @{
                        var newAmount = item.Qty * GetAvePriceFor(item.ProductId);
                    }
                    @newAmount.ToString("N2")
                </MudTd>
                <MudTd>@item.Status</MudTd>
                <MudTd class="text-center">
                    <div class="d-flex justify-center gap-2">
                        <MudTooltip Text="Edit Item">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                                OnClick="@(() => EditItem(item))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete Item">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                OnClick="@(() => RemoveItem(item))" />
                        </MudTooltip>
                    </div>
                </MudTd>
            }
        </RowTemplate>

        <FooterContent>
            <MudTd Style="width: 250px;">
                <MudSelect T="Guid ?" @bind-Value="ProductId"
                    Placeholder="Select Product Here" Variant="Variant.Outlined">
                    @foreach (var product in Products)
                    {
                        <MudSelectItem T="Guid ?" Value="product.Id"
                            Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap; display: block;">
                            @product.Name
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudTd>

            @if (ProductId != null)
            {
                <MudTd Style="width: 120px;">
                    <MudText>@GetBalanceFor(ProductId).ToString("N0")</MudText>
                </MudTd>
                <MudTd Style="width: 100px;">
                    <MudNumericField HideSpinButtons T="int" @bind-Value="Qty" Min="1" Max="@GetBalanceFor(ProductId)"
                        Variant="Variant.Outlined" />
                </MudTd>
                <MudTd Style="width: 140px;">
                    <MudTextField T="string" Value="@GetAvePriceFor(ProductId).ToString("N2")" ReadOnly
                        Variant="Variant.Outlined" />
                </MudTd>
                <MudTd>
                    @{
                        var newAmount = Qty * GetAvePriceFor(ProductId);
                    }
                    <MudTextField T="string" Value="@newAmount.ToString("N2")" ReadOnly Label="Auto Compute"
                        Variant="Variant.Outlined" />
                </MudTd>               

                <MudTd class="text-center">
                    <MudTooltip Text="Add Item">
                        <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary"
                            Disabled="@(GetBalanceFor(ProductId) <= 0 || Qty < 1 || Qty > GetBalanceFor(ProductId))"
                            OnClick="AddNewItem" />
                    </MudTooltip>
                </MudTd>
            }
            else
            {
                <MudTd colspan="5"></MudTd>
            }

        </FooterContent>

    </MudTable>
</MudPaper>