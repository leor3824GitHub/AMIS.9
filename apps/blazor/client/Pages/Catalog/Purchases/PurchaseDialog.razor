<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudSelect T="Guid?" Label="Supplier" @bind-Value="Model.SupplierId">
                        @foreach (var suppliers in _suppliers)
                        {
                            <MudSelectItem T="Guid?" Value="suppliers.Id">@suppliers.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="Model.PurchaseDate" Label="Purchase Date" For="@(() => Model.PurchaseDate)" />
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="String" Label="Status" @bind-Value="Model.Status">
                        @foreach (var status in Enum.GetValues(typeof(PurchaseStatus)).Cast<PurchaseStatus>())
                        {
                            <MudSelectItem T="String" Value="status.ToString()">@status</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudTextField @bind-Value="Model.TotalAmount" Label="TotalAmount" For="@(() => Model.TotalAmount)" />
                </MudItem>                
            </MudGrid>
            <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddNewItem">Add Item</MudButton>
            <MudTable T="PurchaseItemUpdateDto"
                      Items="Model.Items"
                      ReadOnly="false"
                      CanCancelEdit="true"
                      Hover="true"
                      Bordered="true"
                      RowEditCommit="OnItemEdited"
                      RowEditCancel="OnRowEditCancel">
                <RowTemplate Context="Itemcontext">                    
                    <MudTd T="Guid?" DataLabel="ProductId">
                        @_products.FirstOrDefault(p => p.Id == Itemcontext.ProductId)?.Name
                    </MudTd>
                    <MudTd T="int" DataLabel="Qty">@Itemcontext.Qty</MudTd>
                    <MudTd T="double" DataLabel="UnitPrice">@Itemcontext.UnitPrice</MudTd>
                    <MudTd T="string" DataLabel="Status">@Itemcontext.Status</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveItem(Itemcontext))" />
                    </MudTd>
                </RowTemplate>
                <RowEditingTemplate Context="Itemcontext">
                    <MudTd DataLabel="Product">
                        <MudSelect T="Guid" Label="Product" @bind-Value="Itemcontext.ProductId">
                            @foreach (var product in _products)
                            {
                                <MudSelectItem T="Guid?" Value="product.Id">@product.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                    <MudTd DataLabel="Qty">
                        <MudNumericField T="int" @bind-Value="Itemcontext.Qty" Required />
                    </MudTd>
                    <MudTd DataLabel="Unit Price">
                        <MudNumericField T="double" @bind-Value="Itemcontext.UnitPrice" Required />
                    </MudTd>
                    <MudTd DataLabel="Status">
                        <MudSelect T="string" Label="Status" @bind-Value="Itemcontext.Status">
                            @foreach (var status in Enum.GetValues(typeof(PurchaseStatus)).Cast<PurchaseStatus>())
                            {
                                <MudSelectItem T="string" Value="status.ToString()">@status</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>           
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


